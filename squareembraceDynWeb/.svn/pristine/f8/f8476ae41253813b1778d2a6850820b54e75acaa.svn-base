package com.belteshazzar.sqrm;

import java.util.regex.Pattern;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

import com.belteshazzar.sqrm.json.WikiJSON;
import com.belteshazzar.sqrm.json.WikiRequestJSON;
import com.belteshazzar.wiki.Wiki;
import com.belteshazzar.wiki.WikiUtils;

@Path("/rest/wiki")
@Stateless
// @TransactionManagement(TransactionManagementType.BEAN)
public class SqrmRestWiki
{
	private static final Pattern BLANK = Pattern.compile("^\\s*$");

	private boolean isBlank(String s)
	{
		if (s == null) return true;
		return BLANK.matcher(s).matches();
	}

	@PersistenceContext(unitName = "seJPA")
	private EntityManager em;

	@EJB
	private WikiUtils wikiUtils;

	// @Resource
	// private UserTransaction utx;

	@Context
	private UriInfo uriInfo;

	@POST
	// @Path("wiki")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public WikiJSON create(WikiRequestJSON cwr)
	{
		long start = System.currentTimeMillis();

		if (cwr == null) throw new SqrmException(SqrmError.INVALID_EMAIL);

		if (isBlank(cwr.title)) throw new SqrmException(
				SqrmError.TITLE_REQUIRED);
		if (isBlank(cwr.body)) throw new SqrmException(SqrmError.BODY_REQUIRED);
		if (isBlank(cwr.note)) throw new SqrmException(SqrmError.NOTE_REQUIRED);

		Wiki wiki = wikiUtils.create(cwr);
		WikiJSON wj = wikiUtils.execute(uriInfo, wiki);
		wj.generatedIn = System.currentTimeMillis() - start;
		System.out.println("create: wj= " + wj);
		return wj;
	}

	@GET
	@Path("/{title}")
	@Produces(MediaType.APPLICATION_JSON)
	public WikiJSON get(@PathParam("title") String title)
	{
		long start = System.currentTimeMillis();
		Wiki w = wikiUtils.getByTitle(title);
		if (w == null) throw new SqrmException(SqrmError.INVALID_EMAIL,
				"not found");
		WikiJSON wj = wikiUtils.execute(uriInfo, w);
		wj.generatedIn = System.currentTimeMillis() - start;
		return wj;
	}

	@PUT
	@Path("/{title}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public WikiJSON update(@PathParam("title") String title, WikiRequestJSON uwr)
	{
		long start = System.currentTimeMillis();
		System.err.println("update : " + title);
		Wiki w = wikiUtils.getByTitle(title);
		if (w == null) throw new SqrmException(SqrmError.INVALID_EMAIL,
				"not found");

		Wiki wiki = wikiUtils.update(title, uwr);
		WikiJSON wj = wikiUtils.execute(uriInfo, wiki);
		wj.generatedIn = System.currentTimeMillis() - start;
		return wj;
	}

	@DELETE
	@Path("/{title}")
	public void delete(@PathParam("title") String title)
	{
		Wiki w = wikiUtils.getByTitle(title);
		if (w == null) throw new SqrmException(SqrmError.INVALID_EMAIL,
				"not found");
		wikiUtils.delete(title);
	}
}
